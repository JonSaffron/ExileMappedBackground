using System;
using System.Collections.Generic;

namespace ExileWorldGenerator
    {
    internal static class CalculateBackgroundObjectData
        {
        private static readonly Dictionary<int, byte[]> BackgroundObjectsXLookup = BuildBackgroundObjectsXLookup();
        private static readonly byte[] LookupForUnmatchedHash = BuildLookupForUnmatchedHash();
        private static readonly Dictionary<int, byte[]> BackgroundObjectsHandlerLookup = BuildBackgroundObjectsHandlerLookup();
        private static readonly Dictionary<int, byte[]> BackgroundDataLookup = BuildBackgroundDataLookup();
        private static readonly Dictionary<int, byte[]> BackgroundTypeLookup = BuildBackgroundTypeLookup();

        internal static BackgroundObjectData GetBackgroundObjectData(byte calculatedBackground, byte squareX)
            {
            var spriteOrHash = calculatedBackground & 0x3f;
            if (spriteOrHash >= 9)
                {
                return new BackgroundObjectData {Result = calculatedBackground, IsHashDefault = false};
                }

            // check the background objects X lookup list
            var listOfX = BackgroundObjectsXLookup[spriteOrHash];
            var positionInHash = Array.IndexOf(listOfX, squareX);
            if (positionInHash == -1)
                {
                byte defaultBackground = LookupForUnmatchedHash[spriteOrHash];
                defaultBackground ^= (byte) (calculatedBackground & 0xc0);
                return new BackgroundObjectData {Result = defaultBackground, IsHashDefault = true};
                }

            var handlerList = BackgroundObjectsHandlerLookup[spriteOrHash];
            byte backgroundObjectHandler = handlerList[positionInHash];
            byte backgroundObjectId = (byte) positionInHash;
            for (int i = 0; i < spriteOrHash; i++)
                {
                var countOfItemsInHash = BackgroundObjectsXLookup[i].Length;
                backgroundObjectId += (byte) countOfItemsInHash;
                }

            var dataList = BackgroundDataLookup[spriteOrHash];
            byte? data = positionInHash < dataList.Length ? dataList[positionInHash] : new byte?();

            byte? id = null;
            if (data.HasValue)
                {
                id = (byte) positionInHash;
                for (int i = 0; i < spriteOrHash; i++)
                    {
                    var countOfItemsInList = BackgroundDataLookup[i].Length;
                    id += (byte) countOfItemsInList;
                    }
                id += 1;
                }

            var typeList = BackgroundTypeLookup[spriteOrHash];
            byte? type = positionInHash < typeList.Length ? typeList[positionInHash] : new byte?();

            var result = new BackgroundObjectData
                {
                Result = backgroundObjectHandler,
                Number = backgroundObjectId,
                IsHashDefault = false,
                Data = data,
                Id = id,
                Type = type
                };
            return result;
            }

        private static Dictionary<int, byte[]> BuildBackgroundObjectsXLookup()
            {
            var result = new Dictionary<int, byte[]>
                {
                    {
                    0,
                    new byte[]
                        {
                        0xFF, 0xFF, 0xB0, 0xEC, 0x77, 0x64, 0x9A, 0xAF, 0xDA, 0xC6, 0x36, 0x9F, 0x2E, 0xA9,
                        0x9C, 0x83, 0x88, 0x5F, 0x57, 0xBF, 0x9D, 0x4D, 0x45, 0x81, 0xB3, 0x3F, 0xCB, 0x40, 0x4C
                        }
                    },
                    {
                    1,
                    new byte[]
                        {
                        0xCA, 0x2F, 0xA7, 0x56, 0x34, 0xE3, 0x3B, 0xE4, 0x80, 0xE0, 0x64, 0x37, 0x47, 0x9F,
                        0x9C, 0xAA, 0x9B, 0x9A, 0x5E, 0xC7, 0x8A, 0x60, 0x9D, 0xA2, 0xB2, 0x98, 0xA9, 0xDB
                        }
                    },
                    {
                    2,
                    new byte[]
                        {
                        0x28, 0x29, 0x3C, 0x98, 0x63, 0xCB, 0x61, 0xA3, 0xCE, 0xE9, 0x80, 0x2E, 0x4F, 0x79,
                        0x87, 0xB6, 0x97, 0x2D, 0xD6, 0x5C, 0xA0, 0x74, 0x6A, 0xA1, 0x9F, 0x89, 0x85, 0x6B,
                        0xAE, 0x65
                        }
                    },
                    {
                    3,
                    new byte[]
                        {
                        0xE2, 0xED, 0x80, 0xCD, 0xA8, 0x2B, 0xAB, 0x9D, 0x62, 0xE5, 0x70, 0xEC, 0x83, 0xC1,
                        0xC6, 0x67, 0xEB, 0x2D, 0x98, 0xAA, 0xCC, 0xA5, 0x9E, 0xA2, 0xD7, 0xE6, 0xE7, 0x94,
                        0x7C, 0xE3, 0x45, 0x9B, 0x9F, 0xC2, 0x71
                        }
                    },
                    {
                    4,
                    new byte[]
                        {
                        0x67, 0x4F, 0xCF, 0xD2, 0xE2, 0x7A, 0x62, 0xDA, 0x76, 0xB2, 0x66, 0xD7, 0x83, 0x84,
                        0x80, 0x87, 0x9B, 0x50, 0xAE, 0x64, 0xA3, 0x63, 0xB8, 0x7F, 0x82, 0xE0, 0x9C, 0x61,
                        0x9D, 0x29, 0x46, 0x9F, 0x9A, 0x74, 0x75, 0x77
                        }
                    },
                    {
                    5,
                    new byte[]
                        {
                        0xB2, 0xE4, 0x62, 0x63, 0x82, 0x61, 0xD4, 0xD3, 0x77, 0x2E, 0x64, 0x86, 0xA5, 0xA0,
                        0xD1, 0xB4, 0x7F, 0xA3, 0x9F, 0x99, 0x80, 0x67, 0xDA, 0x89, 0x95, 0x8B, 0xAB, 0xC4,
                        0x9D, 0xAA
                        }
                    },
                    {
                    6,
                    new byte[]
                        {
                        0xBB, 0x47, 0x8A, 0xA7, 0x61, 0x9E, 0x2E, 0xD6, 0x7E, 0xDA, 0xAA, 0xAB, 0x45, 0x67,
                        0xD4, 0x29, 0xB8, 0x6B, 0x69, 0x9D, 0x94, 0x63, 0xB4, 0xA1, 0x9F, 0xA0, 0x57, 0xE1
                        }
                    },
                    {
                    7,
                    new byte[]
                        {
                        0x7F, 0xA6, 0xB4, 0x53, 0x61, 0xD4, 0x82, 0xE3, 0x75, 0xC3, 0x84, 0x9E, 0xC6, 0x64,
                        0xA2, 0x28, 0x29, 0x9D, 0x83, 0xA8, 0x80, 0xAA, 0xD5, 0xA0, 0x9F, 0xD6, 0x62, 0x69,
                        0x2C, 0xA5
                        }
                    },
                    {8, new byte[] {0xB8, 0xB9, 0xD9, 0x59, 0x79, 0x39, 0x48, 0xE8}},
                    {9, new byte[] {0x03}}
                };
            return result;
            }

        private static byte[] BuildLookupForUnmatchedHash()
            {
            return new byte[] {0x1B,0x5A,0x19,0x19,0x1E,0x13,0x24,0x2C,0x19};
            }

        private static Dictionary<int, byte[]> BuildBackgroundObjectsHandlerLookup()
            {
            var result = new Dictionary<int, byte[]>
                {
                    {
                    0,
                    new byte[]
                        {
                        0x89, 0x89, 0x89, 0x89, 0x89, 0x8a, 0x46, 0xc6, 0x06, 0x06, 0x46, 0x05, 0x05, 0x00,
                        0xc3, 0x04, 0x83, 0x84, 0x84, 0x83, 0x88, 0x48, 0x02, 0x02, 0x42, 0x02, 0x7b, 0x22, 0x1e
                        }
                    },
                    {
                    1,
                    new byte[]
                        {
                        0x06, 0x06, 0xc6, 0x06, 0x46, 0x46, 0x85, 0x85, 0x87, 0x89, 0x89, 0xc7, 0x0a, 0x8c, 
                        0x03, 0x84, 0x83, 0x43, 0x84, 0x84, 0x02, 0x01, 0x41, 0x01, 0x01, 0x2e, 0x1e, 0x3b
                        }
                    },
                    {
                    2,
                    new byte[]
                        {
                        0x46, 0x46, 0x06, 0xc6, 0x06, 0x06, 0x06, 0x46, 0x06, 0x09, 0xc9, 0x89, 0xca, 0x8a,
                        0x8a, 0x0a, 0x4a, 0x8a, 0x04, 0x44, 0x41, 0x01, 0xc8, 0x48, 0xcc, 0x82, 0x02, 0x02,
                        0x02, 0x1e
                        }
                    },
                    {
                    3,
                    new byte[]
                        {
                        0x89, 0x09, 0x0a, 0x4a, 0xca, 0x4a, 0x86, 0x46, 0x46, 0x46, 0x86, 0x45, 0x47, 0x00,
                        0x00, 0x00, 0x00, 0x84, 0xc3, 0x44, 0x43, 0x43, 0x43, 0x44, 0x84, 0x44, 0x04, 0x01,
                        0x08, 0x08, 0x02, 0x02, 0x82, 0x1e, 0x2d
                        }
                    },
                    {
                    4,
                    new byte[]
                        {
                        0x46, 0x46, 0x45, 0x46, 0xc6, 0x89, 0xc9, 0x49, 0x89, 0xca, 0xca, 0x8a, 0x8a, 0x8a,
                        0x0a, 0x00, 0x00, 0xc4, 0x43, 0x04, 0x43, 0x84, 0x44, 0x04, 0x44, 0x84, 0x41, 0x01,
                        0x01, 0x01, 0xc8, 0x42, 0x82, 0x3b, 0x11, 0x3b
                        }
                    },
                    {
                    5,
                    new byte[]
                        {
                        0x89, 0xc9, 0xca, 0x8a, 0xc6, 0x06, 0xc6, 0xc6, 0x06, 0x06, 0x85, 0x47, 0x4a, 0xca,
                        0x8a, 0x00, 0x00, 0x44, 0x43, 0xc3, 0x44, 0x44, 0x04, 0x41, 0xc8, 0x88, 0xc8, 0xc8,
                        0x02, 0x8c
                        }
                    },
                    {
                    6,
                    new byte[]
                        {
                        0x49, 0x89, 0x0a, 0x0a, 0x8a, 0xc6, 0x06, 0x06, 0x47, 0x87, 0xcc, 0x41, 0x01, 0x08,
                        0x08, 0x08, 0x08, 0xc4, 0x84, 0x43, 0x43, 0x84, 0x04, 0x83, 0x82, 0x82, 0x0d, 0x0d
                        }
                    },
                    {
                    7,
                    new byte[]
                        {
                        0x46, 0x06, 0x06, 0x06, 0x06, 0x45, 0x45, 0x45, 0x06, 0x07, 0x89, 0x09, 0x8a, 0x4a,
                        0x4a, 0xca, 0xca, 0x4a, 0x00, 0x00, 0x00, 0x48, 0x08, 0x82, 0x82, 0x82, 0x02, 0xc4,
                        0xc4, 0x0b
                        }
                    },
                    {8, new byte[] {0x0b, 0x0b, 0xd1, 0x91, 0xd1, 0xd1, 0x91, 0x91}},
                    {9, new byte[] {0x0d}}
                };
            return result;
            }

        private static Dictionary<int, byte[]> BuildBackgroundDataLookup()
            {
            var result = new Dictionary<int, byte[]>
                {
                    {
                    0,
                    new byte[]
                        {
                        0x7c, 0x60, 0x04, 0x88, 0x88, 0xa0, 0xa6, 0xae, 0x83, 0x86, 0x82, 0x80, 0x80, 0xad, 0x81, 0xf7,
                        0xa1, 0xf1, 0xf7, 0x81, 0x8a, 0xac, 0xd2, 0xdf, 0xd4, 0xa3
                        }
                    },
                    {
                    1,
                    new byte[]
                        {
                        0x84, 0x85, 0xae,
                        0x80, 0x80, 0x88, 0xac, 0xc4, 0xc0, 0x04, 0xa8, 0xc4, 0xbc, 0xfd, 0x81, 0xc1, 0xd1, 0x91, 0xf1,
                        0xf1, 0xda, 0xf7, 0xf3, 0xd8, 0x88
                        }
                    },
                    {
                    2,
                    new byte[]
                        {
                        0x80, 0x83, 0x83, 0xb0, 0xaa, 0x80, 0x80,
                        0x87, 0x80, 0x30, 0x08, 0x10, 0x7c, 0x04, 0x10, 0xa8, 0x90, 0x04, 0xc1, 0xf1, 0xe1, 0x95, 0xbc,
                        0xb4, 0xfd, 0xa1, 0xd6, 0xdd, 0xe2
                        }
                    },
                    {
                    3,
                    new byte[]
                        {
                        0x04, 0x0c, 0x04, 0x20, 0x21, 0xa0, 0xb0, 0xac, 0x83,
                        0x81, 0x84, 0x80, 0xc4, 0x85, 0x95, 0xa3, 0xb5, 0xf1, 0xad, 0xc1, 0x81, 0x89, 0xa0, 0xc1, 0xf1,
                        0xf1, 0xc1, 0x8c, 0xa4, 0xe4, 0xd7, 0x9d, 0xe1
                        }
                    },
                    {
                    4,
                    new byte[]
                        {
                        0xa6, 0x81, 0x85, 0x83, 0x83, 0xd0,
                        0xa8, 0x04, 0x04, 0xd0, 0x88, 0x04, 0x04, 0x04, 0x08, 0xbd, 0x8a, 0xf1, 0xd1, 0xf1, 0xb1, 0xf1,
                        0xc1, 0xc1, 0xc1, 0xc1, 0xe2, 0xe4, 0xdc, 0xa0, 0xc2, 0xcb, 0xb8
                        }
                    },
                    {
                    5,
                    new byte[]
                        {
                        0xa8, 0x10,
                        0x98, 0xa0, 0x80, 0x83, 0x80, 0x80, 0x80, 0x80, 0x00, 0xc4, 0x40, 0x84, 0x28, 0x75, 0xbc, 0xf1,
                        0xd1, 0xa9, 0xf1, 0xc0, 0xc1, 0x8f, 0x94, 0xc2, 0xca, 0xfa, 0x9c, 0xfe
                        }
                    },
                    {
                    6,
                    new byte[]
                        {
                        0x10, 0x14, 0x90, 0x98,
                        0x04, 0xa4, 0x80, 0x83, 0xc6, 0xc4, 0xfe, 0xaa, 0x90, 0xec, 0xdc, 0x9e, 0xf4, 0xf7, 0xf1, 0xf1,
                        0x81, 0xf1, 0xf1, 0xb1, 0xdb, 0x9e
                        }
                    },
                    {
                    7,
                    new byte[]
                        {
                        0x84, 0xac, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
                        0x80, 0xc0, 0x04, 0x08, 0x90, 0xa2, 0x04, 0x04, 0x04, 0x20, 0xbc, 0x53, 0x9d, 0x84, 0xda, 0xcb,
                        0xde, 0xc5, 0xa5, 0xc1, 0xf1, 0x70
                        }
                    },
                    {
                    8, 
                    new byte[]
                        {
                        0xd0, 0x80
                        }
                    }
                };
            return result;
            }

        private static Dictionary<int, byte[]> BuildBackgroundTypeLookup()
            {
            var result = new Dictionary<int, byte[]>
                {
                    {
                    0,
                    new byte[]
                        {
                        0x0f, 0x27, 0x2e, 0x07, 0x2f, 0x2d, 0x1f, 0x1f, 0x0d, 0x0d, 0x0d, 0x0c, 0x60, 0x2c
                        }
                    },
                    {
                    1,
                    new byte[]
                        {
                        0x0d, 0x0d, 0x1f, 0x0d, 0x5c, 0x0d, 0x20, 0x05, 0x04, 0x06, 0x31, 0x05, 0x2a
                        }
                    },
                    {
                    2,
                    new byte[]
                        {
                        0x09, 0x0d, 0x0d, 0x1f, 0x20, 0x55, 0x55, 0x0d, 0x63, 0x0f, 0x2e, 0x0a, 0x1b, 0x37, 0x29, 0x1a, 0x1a, 0x37
                        }
                    },
                    {
                    3,
                    new byte[]
                        {
                        0x37, 0x0a, 0x37, 0x4b, 0x4b, 0x2d, 0x1f, 0x20, 0x0d, 0x0d, 0x28, 0x55, 0x05, 0x80, 0x00, 0x80, 0x80
                        }
                    },
                    {
                    4,
                    new byte[]
                        {
                        0x20, 0x28, 0x0d, 0x0d, 0x28, 0x27, 0x31, 0x0e, 0x08, 0x11, 0x39, 0x37, 0x37, 0x37, 0x2a, 0x80, 0x4a
                        }
                    },
                    {
                    5,
                    new byte[]
                        {
                        0x10, 0x2f, 0x30, 0x30, 0x09, 0x0d, 0x09, 0x09, 0x4f, 0x24, 0x4a, 0x04, 0x1a, 0x39, 0x10, 0x00, 0x4c
                        }
                    },
                    {
                    6,
                    new byte[]
                        {
                        0x0a, 0x2f, 0x29, 0x2c, 0x37, 0x20, 0x3a, 0x0d, 0x05, 0x05
                        }
                    },
                    {
                    7,
                    new byte[]
                        {
                        0x0d, 0x20, 0x0d, 0x0d, 0x48, 0x51, 0x0c, 0x55, 0x22, 0x04, 0x2e, 0x2f, 0x2b, 0x2a, 0x21, 0x02, 0x02, 0x1a, 0x80, 0x4b, 0x80
                        }
                    },
                    {
                    8,
                    new byte[]
                        {
                        }
                    }
                };
            return result;
            }
        }
    }
